---
import Layout from '../layouts/Layout.astro';
import Section from '../components/common/Section.astro';
import Container from '../components/common/Container.astro';
import Heading from '../components/common/Heading.astro';
import ProjectCard from '../components/projects/ProjectCard.astro'; // Assuming a ProjectCard component exists or will be created

const GITHUB_USERNAME = 'emscape';
const GITHUB_API_URL = `https://api.github.com/users/${GITHUB_USERNAME}/repos?sort=pushed&direction=desc`;
const GITHUB_TOKEN = import.meta.env.GIT_PAT; // Access token from .env

let projects = [];
let fetchError = null;

try {
  const headers = {
    'Accept': 'application/vnd.github.v3+json',
    'User-Agent': 'Astro-EmscapeForge-Website'
  };
  if (GITHUB_TOKEN) {
    headers['Authorization'] = `Bearer ${GITHUB_TOKEN}`;
  }

  const response = await fetch(GITHUB_API_URL, { headers });

  if (!response.ok) {
    // Try to get more specific error message from GitHub API response
    let errorBody = 'Unknown error';
    try {
      const errorJson = await response.json();
      errorBody = errorJson.message || JSON.stringify(errorJson);
    } catch (e) {
      // Ignore if response body is not JSON
    }
    throw new Error(`GitHub API request failed: ${response.status} ${response.statusText}. ${errorBody}`);
  }

  const data = await response.json();
  // Filter out forks if desired, or add other filtering logic here
  // Example: Filter out forks and sort by stars
  projects = data
    // .filter(repo => !repo.fork) // Uncomment to filter out forks
    .sort((a, b) => b.stargazers_count - a.stargazers_count) // Sort by stars descending
    .map(repo => ({
      id: repo.id,
      name: repo.name,
      description: repo.description || 'No description provided.',
      url: repo.html_url,
      language: repo.language,
      stars: repo.stargazers_count,
      forks: repo.forks_count,
      pushed_at: repo.pushed_at,
      topics: repo.topics || []
  }));

} catch (error) {
  console.error("Error fetching GitHub projects:", error);
  fetchError = error.message || 'Failed to fetch projects from GitHub.';
}

---
<Layout title="Projects | EmscapeForge" description="Explore projects by Emily Anderson.">
  <Section>
    <Container>
      <Heading level={1} className="text-center mb-12">
        My Projects
      </Heading>
      {fetchError ? (
        <div class="text-center text-red-500 dark:text-red-400 border border-red-500 dark:border-red-400 p-4 rounded bg-red-50 dark:bg-red-900/20">
          <p class="font-semibold mb-2">Error loading projects</p>
          <p class="text-sm">{fetchError}</p>
          <p class="text-sm mt-1">Please check the configuration (like the GIT_PAT token) or try again later.</p>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projects.length > 0 ? (
            projects.map(project => (
              <ProjectCard project={project} />
            ))
          ) : (
            <p class="col-span-full text-center text-gray-500 dark:text-gray-400">No public projects found for {GITHUB_USERNAME}.</p>
          )}
        </div>
      )}
    </Container>
  </Section>
</Layout>