---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

// Fetch all blog posts
const allPosts = await getCollection('blog');

// Sort posts by publication date (newest first)
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

// Get the 3 most recent posts
const recentPostsData = sortedPosts.slice(0, 3);

// Map posts to the format needed by the template
const recentPosts = recentPostsData.map(post => ({
  title: post.data.title,
  slug: post.slug,
  date: post.data.pubDate, // Pass the Date object or string directly
  excerpt: post.data.description, // Using description as excerpt
  featuredImage: post.data.featuredImage, // Assuming Astro handles image paths or it's configured
  tags: post.data.tags || [] // Ensure tags is always an array
}));


// Format date
function formatDate(dateInput) {
  // Check if dateInput is already a Date object or a string/number
  const date = dateInput instanceof Date ? dateInput : new Date(dateInput);
  // Check if the date is valid before formatting
  if (isNaN(date.getTime())) {
    console.error("Invalid date passed to formatDate:", dateInput);
    return "Invalid Date"; // Or return an empty string or default text
  }
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<section class="recent-posts">
  <div class="container">
    <div class="section-header">
      <h2>Recent Blog Posts</h2>
      <a href="/blog" class="view-all">View All Posts</a>
    </div>
    
    <div class="posts-grid">
      {recentPosts.map(post => (
        <article class="post-card">
          <div class="post-image">
            <a href={`/blog/${post.slug}`}>
              {post.featuredImage ? (
                <Image
                  src={post.featuredImage}
                  alt={post.title}
                  width={350}
                  height={200}
                  format="webp"
                  quality={80}
                />
              ) : (
                <div class="image-placeholder">
                  <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <circle cx="8.5" cy="8.5" r="1.5"></circle>
                    <polyline points="21 15 16 10 5 21"></polyline>
                  </svg>
                </div>
              )}
            </a>
          </div>
          <div class="post-content">
            <div class="post-meta">
              <time datetime={post.date}>{formatDate(post.date)}</time>
              <div class="post-tags">
                {post.tags.slice(0, 1).map(tag => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
            </div>
            <h3 class="post-title">
              <a href={`/blog/${post.slug}`}>{post.title}</a>
            </h3>
            <p class="post-excerpt">{post.excerpt}</p>
            <a href={`/blog/${post.slug}`} class="read-more">Read More</a>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<style lang="scss">
  .recent-posts {
    padding: 4rem 0;
    background-color: rgba(0, 0, 0, 0.02);
    
    .dark-mode & {
      background-color: rgba(255, 255, 255, 0.02);
    }
  }
  
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    
    h2 {
      font-size: 2rem;
      margin: 0;
    }
    
    .view-all {
      font-weight: 500;
      
      &::after {
        content: ' →';
        transition: transform var(--transition-fast);
        display: inline-block;
      }
      
      &:hover::after {
        transform: translateX(4px);
      }
    }
  }
  
  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 2rem;
  }
  
  .post-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius-medium);
    overflow: hidden;
    border: var(--card-border);
    transition: transform var(--transition-default), box-shadow var(--transition-default);
    
    &:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow-medium);
    }
  }
  
  .post-image {
    height: 200px;
    overflow: hidden;
    
    a {
      display: block;
      height: 100%;
    }
    
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform var(--transition-default);
    }
    
    &:hover img {
      transform: scale(1.05);
    }
    
    .image-placeholder {
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.05);
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--color-text);
      opacity: 0.7;
      
      .dark-mode & {
        background-color: rgba(255, 255, 255, 0.05);
      }
    }
  }
  
  .post-content {
    padding: 1.5rem;
  }
  
  .post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
    font-size: 0.85rem;
    color: var(--color-text);
    opacity: 0.7;
  }
  
  .post-tags {
    display: flex;
    gap: 0.5rem;
    
    .tag {
      background-color: var(--tag-bg);
      color: var(--tag-text);
      padding: 0.2rem 0.5rem;
      border-radius: 50px;
      font-size: 0.75rem;
    }
  }
  
  .post-title {
    margin-top: 0;
    margin-bottom: 0.75rem;
    font-size: 1.25rem;
    line-height: 1.3;
    
    a {
      color: var(--color-text);
      text-decoration: none;
      
      &:hover {
        color: var(--color-primary);
      }
    }
  }
  
  .post-excerpt {
    margin-bottom: 1.25rem;
    font-size: 0.95rem;
    line-height: 1.5;
    color: var(--color-text);
    opacity: 0.8;
  }
  
  .read-more {
    font-size: 0.9rem;
    font-weight: 500;
    
    &::after {
      content: ' →';
      transition: transform var(--transition-fast);
      display: inline-block;
    }
    
    &:hover::after {
      transform: translateX(4px);
    }
  }
  
  @media (max-width: 768px) {
    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style>